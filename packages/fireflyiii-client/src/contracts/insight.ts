import { initContract } from '@ts-rest/core';
import { z } from 'zod';
import {
  BadRequestResponse,
  InternalExceptionResponse,
  NotFoundResponse,
  UnauthenticatedResponse,
} from '../schema/error-response';

const c = initContract();

const InsightGroupEntry = z
  .object({
    id: z.string().optional(),
    name: z.string().optional(),
    difference: z.string().optional(),
    difference_float: z.number().optional(),
    currency_id: z.string().optional(),
    currency_code: z.string().optional(),
  })
  .passthrough();
const InsightGroup = z.array(InsightGroupEntry);
const InsightTotalEntry = z
  .object({
    difference: z.string().optional(),
    difference_float: z.number().optional(),
    currency_id: z.string().optional(),
    currency_code: z.string().optional(),
  })
  .passthrough();
const InsightTotal = z.array(InsightTotalEntry);
const InsightTransferEntry = z
  .object({
    id: z.string().optional(),
    name: z.string().optional(),
    difference: z.string().optional(),
    difference_float: z.number().optional(),
    in: z.string().optional(),
    in_float: z.number().optional(),
    out: z.string().optional(),
    out_float: z.number().optional(),
    currency_id: z.string().optional(),
    currency_code: z.string().optional(),
  })
  .passthrough();
const InsightTransfer = z.array(InsightTransferEntry);

export const insightContract = c.router({
  insightExpenseExpense: {
    method: 'GET',
    path: '/v1/insight/expense/expense',
    summary: 'Insight into expenses, grouped by expense account.',
    headers: z.object({ 'X-Trace-Id': z.string().uuid().optional() }),
    query: z.object({ start: z.string(), end: z.string(), 'accounts[]': z.array(z.number().int()).optional() }),
    responses: {
      200: InsightGroup,
      400: BadRequestResponse,
      401: UnauthenticatedResponse,
      404: NotFoundResponse,
      500: InternalExceptionResponse,
    },
  },
  insightExpenseAsset: {
    method: 'GET',
    path: '/v1/insight/expense/asset',
    summary: 'Insight into expenses, grouped by asset account.',
    headers: z.object({ 'X-Trace-Id': z.string().uuid().optional() }),
    query: z.object({ start: z.string(), end: z.string(), 'accounts[]': z.array(z.number().int()).optional() }),
    responses: {
      200: InsightGroup,
      400: BadRequestResponse,
      401: UnauthenticatedResponse,
      404: NotFoundResponse,
      500: InternalExceptionResponse,
    },
  },
  insightIncomeRevenue: {
    method: 'GET',
    path: '/v1/insight/income/revenue',
    summary: 'Insight into income, grouped by revenue account.',
    headers: z.object({ 'X-Trace-Id': z.string().uuid().optional() }),
    query: z.object({ start: z.string(), end: z.string(), 'accounts[]': z.array(z.number().int()).optional() }),
    responses: {
      200: InsightGroup,
      400: BadRequestResponse,
      401: UnauthenticatedResponse,
      404: NotFoundResponse,
      500: InternalExceptionResponse,
    },
  },
  insightIncomeAsset: {
    method: 'GET',
    path: '/v1/insight/income/asset',
    summary: 'Insight into income, grouped by asset account.',
    headers: z.object({ 'X-Trace-Id': z.string().uuid().optional() }),
    query: z.object({ start: z.string(), end: z.string(), 'accounts[]': z.array(z.number().int()).optional() }),
    responses: {
      200: InsightGroup,
      400: BadRequestResponse,
      401: UnauthenticatedResponse,
      404: NotFoundResponse,
      500: InternalExceptionResponse,
    },
  },
  insightTransfers: {
    method: 'GET',
    path: '/v1/insight/transfer/asset',
    summary: 'Insight into transfers, grouped by account.',
    headers: z.object({ 'X-Trace-Id': z.string().uuid().optional() }),
    query: z.object({ start: z.string(), end: z.string(), 'accounts[]': z.array(z.number().int()).optional() }),
    responses: {
      200: InsightTransfer,
      400: BadRequestResponse,
      401: UnauthenticatedResponse,
      404: NotFoundResponse,
      500: InternalExceptionResponse,
    },
  },
  insightExpenseBill: {
    method: 'GET',
    path: '/v1/insight/expense/bill',
    summary: 'Insight into expenses, grouped by bill.',
    headers: z.object({ 'X-Trace-Id': z.string().uuid().optional() }),
    query: z.object({
      start: z.string(),
      end: z.string(),
      'bills[]': z.array(z.number().int()).optional(),
      'accounts[]': z.array(z.number().int()).optional(),
    }),
    responses: {
      200: InsightGroup,
      400: BadRequestResponse,
      401: UnauthenticatedResponse,
      404: NotFoundResponse,
      500: InternalExceptionResponse,
    },
  },
  insightExpenseNoBill: {
    method: 'GET',
    path: '/v1/insight/expense/no-bill',
    summary: 'Insight into expenses, without bill.',
    headers: z.object({ 'X-Trace-Id': z.string().uuid().optional() }),
    query: z.object({ start: z.string(), end: z.string(), 'accounts[]': z.array(z.number().int()).optional() }),
    responses: {
      200: InsightTotal,
      400: BadRequestResponse,
      401: UnauthenticatedResponse,
      404: NotFoundResponse,
      500: InternalExceptionResponse,
    },
  },
  insightExpenseBudget: {
    method: 'GET',
    path: '/v1/insight/expense/budget',
    summary: 'Insight into expenses, grouped by budget.',
    headers: z.object({ 'X-Trace-Id': z.string().uuid().optional() }),
    query: z.object({
      start: z.string(),
      end: z.string(),
      'budgets[]': z.array(z.number().int()).optional(),
      'accounts[]': z.array(z.number().int()).optional(),
    }),
    responses: {
      200: InsightGroup,
      400: BadRequestResponse,
      401: UnauthenticatedResponse,
      404: NotFoundResponse,
      500: InternalExceptionResponse,
    },
  },
  insightExpenseNoBudget: {
    method: 'GET',
    path: '/v1/insight/expense/no-budget',
    summary: 'Insight into expenses, without budget.',
    headers: z.object({ 'X-Trace-Id': z.string().uuid().optional() }),
    query: z.object({ start: z.string(), end: z.string(), 'accounts[]': z.array(z.number().int()).optional() }),
    responses: {
      200: InsightTotal,
      400: BadRequestResponse,
      401: UnauthenticatedResponse,
      404: NotFoundResponse,
      500: InternalExceptionResponse,
    },
  },
  insightExpenseCategory: {
    method: 'GET',
    path: '/v1/insight/expense/category',
    summary: 'Insight into expenses, grouped by category.',
    headers: z.object({ 'X-Trace-Id': z.string().uuid().optional() }),
    query: z.object({
      start: z.string(),
      end: z.string(),
      'categories[]': z.array(z.number().int()).optional(),
      'accounts[]': z.array(z.number().int()).optional(),
    }),
    responses: {
      200: InsightGroup,
      400: BadRequestResponse,
      401: UnauthenticatedResponse,
      404: NotFoundResponse,
      500: InternalExceptionResponse,
    },
  },
  insightExpenseNoCategory: {
    method: 'GET',
    path: '/v1/insight/expense/no-category',
    summary: 'Insight into expenses, without category.',
    headers: z.object({ 'X-Trace-Id': z.string().uuid().optional() }),
    query: z.object({ start: z.string(), end: z.string(), 'accounts[]': z.array(z.number().int()).optional() }),
    responses: {
      200: InsightTotal,
      400: BadRequestResponse,
      401: UnauthenticatedResponse,
      404: NotFoundResponse,
      500: InternalExceptionResponse,
    },
  },
  insightIncomeCategory: {
    method: 'GET',
    path: '/v1/insight/income/category',
    summary: 'Insight into income, grouped by category.',
    headers: z.object({ 'X-Trace-Id': z.string().uuid().optional() }),
    query: z.object({
      start: z.string(),
      end: z.string(),
      'categories[]': z.array(z.number().int()).optional(),
      'accounts[]': z.array(z.number().int()).optional(),
    }),
    responses: {
      200: InsightGroup,
      400: BadRequestResponse,
      401: UnauthenticatedResponse,
      404: NotFoundResponse,
      500: InternalExceptionResponse,
    },
  },
  insightIncomeNoCategory: {
    method: 'GET',
    path: '/v1/insight/income/no-category',
    summary: 'Insight into income, without category.',
    headers: z.object({ 'X-Trace-Id': z.string().uuid().optional() }),
    query: z.object({ start: z.string(), end: z.string(), 'accounts[]': z.array(z.number().int()).optional() }),
    responses: {
      200: InsightTotal,
      400: BadRequestResponse,
      401: UnauthenticatedResponse,
      404: NotFoundResponse,
      500: InternalExceptionResponse,
    },
  },
  insightTransferCategory: {
    method: 'GET',
    path: '/v1/insight/transfer/category',
    summary: 'Insight into transfers, grouped by category.',
    headers: z.object({ 'X-Trace-Id': z.string().uuid().optional() }),
    query: z.object({
      start: z.string(),
      end: z.string(),
      'categories[]': z.array(z.number().int()).optional(),
      'accounts[]': z.array(z.number().int()).optional(),
    }),
    responses: {
      200: InsightGroup,
      400: BadRequestResponse,
      401: UnauthenticatedResponse,
      404: NotFoundResponse,
      500: InternalExceptionResponse,
    },
  },
  insightTransferNoCategory: {
    method: 'GET',
    path: '/v1/insight/transfer/no-category',
    summary: 'Insight into transfers, without category.',
    headers: z.object({ 'X-Trace-Id': z.string().uuid().optional() }),
    query: z.object({ start: z.string(), end: z.string(), 'accounts[]': z.array(z.number().int()).optional() }),
    responses: {
      200: InsightTotal,
      400: BadRequestResponse,
      401: UnauthenticatedResponse,
      404: NotFoundResponse,
      500: InternalExceptionResponse,
    },
  },
  insightExpenseTag: {
    method: 'GET',
    path: '/v1/insight/expense/tag',
    summary: 'Insight into expenses, grouped by tag.',
    headers: z.object({ 'X-Trace-Id': z.string().uuid().optional() }),
    query: z.object({
      start: z.string(),
      end: z.string(),
      'tags[]': z.array(z.number().int()).optional(),
      'accounts[]': z.array(z.number().int()).optional(),
    }),
    responses: {
      200: InsightGroup,
      400: BadRequestResponse,
      401: UnauthenticatedResponse,
      404: NotFoundResponse,
      500: InternalExceptionResponse,
    },
  },
  insightExpenseNoTag: {
    method: 'GET',
    path: '/v1/insight/expense/no-tag',
    summary: 'Insight into expenses, without tag.',
    headers: z.object({ 'X-Trace-Id': z.string().uuid().optional() }),
    query: z.object({ start: z.string(), end: z.string(), 'accounts[]': z.array(z.number().int()).optional() }),
    responses: {
      200: InsightTotal,
      400: BadRequestResponse,
      401: UnauthenticatedResponse,
      404: NotFoundResponse,
      500: InternalExceptionResponse,
    },
  },
  insightIncomeTag: {
    method: 'GET',
    path: '/v1/insight/income/tag',
    summary: 'Insight into income, grouped by tag.',
    headers: z.object({ 'X-Trace-Id': z.string().uuid().optional() }),
    query: z.object({
      start: z.string(),
      end: z.string(),
      'tags[]': z.array(z.number().int()).optional(),
      'accounts[]': z.array(z.number().int()).optional(),
    }),
    responses: {
      200: InsightGroup,
      400: BadRequestResponse,
      401: UnauthenticatedResponse,
      404: NotFoundResponse,
      500: InternalExceptionResponse,
    },
  },
  insightIncomeNoTag: {
    method: 'GET',
    path: '/v1/insight/income/no-tag',
    summary: 'Insight into income, without tag.',
    headers: z.object({ 'X-Trace-Id': z.string().uuid().optional() }),
    query: z.object({ start: z.string(), end: z.string(), 'accounts[]': z.array(z.number().int()).optional() }),
    responses: {
      200: InsightTotal,
      400: BadRequestResponse,
      401: UnauthenticatedResponse,
      404: NotFoundResponse,
      500: InternalExceptionResponse,
    },
  },
  insightTransferTag: {
    method: 'GET',
    path: '/v1/insight/transfer/tag',
    summary: 'Insight into transfers, grouped by tag.',
    headers: z.object({ 'X-Trace-Id': z.string().uuid().optional() }),
    query: z.object({
      start: z.string(),
      end: z.string(),
      'tags[]': z.array(z.number().int()).optional(),
      'accounts[]': z.array(z.number().int()).optional(),
    }),
    responses: {
      200: InsightGroup,
      400: BadRequestResponse,
      401: UnauthenticatedResponse,
      404: NotFoundResponse,
      500: InternalExceptionResponse,
    },
  },
  insightTransferNoTag: {
    method: 'GET',
    path: '/v1/insight/transfer/no-tag',
    summary: 'Insight into expenses, without tag.',
    headers: z.object({ 'X-Trace-Id': z.string().uuid().optional() }),
    query: z.object({ start: z.string(), end: z.string(), 'accounts[]': z.array(z.number().int()).optional() }),
    responses: {
      200: InsightTotal,
      400: BadRequestResponse,
      401: UnauthenticatedResponse,
      404: NotFoundResponse,
      500: InternalExceptionResponse,
    },
  },
  insightExpenseTotal: {
    method: 'GET',
    path: '/v1/insight/expense/total',
    summary: 'Insight into total expenses.',
    headers: z.object({ 'X-Trace-Id': z.string().uuid().optional() }),
    query: z.object({ start: z.string(), end: z.string(), 'accounts[]': z.array(z.number().int()).optional() }),
    responses: {
      200: InsightTotal,
      400: BadRequestResponse,
      401: UnauthenticatedResponse,
      404: NotFoundResponse,
      500: InternalExceptionResponse,
    },
  },
  insightIncomeTotal: {
    method: 'GET',
    path: '/v1/insight/income/total',
    summary: 'Insight into total income.',
    headers: z.object({ 'X-Trace-Id': z.string().uuid().optional() }),
    query: z.object({ start: z.string(), end: z.string(), 'accounts[]': z.array(z.number().int()).optional() }),
    responses: {
      200: InsightTotal,
      400: BadRequestResponse,
      401: UnauthenticatedResponse,
      404: NotFoundResponse,
      500: InternalExceptionResponse,
    },
  },
  insightTransferTotal: {
    method: 'GET',
    path: '/v1/insight/transfer/total',
    summary: 'Insight into total transfers.',
    headers: z.object({ 'X-Trace-Id': z.string().uuid().optional() }),
    query: z.object({ start: z.string(), end: z.string(), 'accounts[]': z.array(z.number().int()).optional() }),
    responses: {
      200: InsightTotal,
      400: BadRequestResponse,
      401: UnauthenticatedResponse,
      404: NotFoundResponse,
      500: InternalExceptionResponse,
    },
  },
});
