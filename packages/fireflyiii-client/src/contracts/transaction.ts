import { initContract } from '@ts-rest/core';
import { z } from 'zod';
import { AttachmentArray } from '../schema/attachment';
import {
  BadRequestResponse,
  InternalExceptionResponse,
  NotFoundResponse,
  UnauthenticatedResponse,
  ValidationErrorResponse,
} from '../schema/error-response';
import { PiggyBankEventArray } from '../schema/piggy-bank';
import { TransactionArray, TransactionSingle, TransactionTypeProperty } from '../schema/transaction';

const c = initContract();

const TransactionSplitStore = z
  .object({
    type: TransactionTypeProperty,
    date: z.string().datetime({ offset: true }),
    amount: z.string(),
    description: z.string(),
    order: z.number().int().nullish(),
    currency_id: z.string().nullish(),
    currency_code: z.string().nullish(),
    foreign_amount: z.string().nullish(),
    foreign_currency_id: z.string().nullish(),
    foreign_currency_code: z.string().nullish(),
    budget_id: z.string().nullish(),
    budget_name: z.string().nullish(),
    category_id: z.string().nullish(),
    category_name: z.string().nullish(),
    source_id: z.string().nullish(),
    source_name: z.string().nullish(),
    destination_id: z.string().nullish(),
    destination_name: z.string().nullish(),
    reconciled: z.boolean().optional(),
    piggy_bank_id: z.number().int().nullish(),
    piggy_bank_name: z.string().nullish(),
    bill_id: z.string().nullish(),
    bill_name: z.string().nullish(),
    tags: z.array(z.string()).nullish(),
    notes: z.string().nullish(),
    internal_reference: z.string().nullish(),
    external_id: z.string().nullish(),
    external_url: z.string().nullish(),
    bunq_payment_id: z.string().nullish(),
    sepa_cc: z.string().nullish(),
    sepa_ct_op: z.string().nullish(),
    sepa_ct_id: z.string().nullish(),
    sepa_db: z.string().nullish(),
    sepa_country: z.string().nullish(),
    sepa_ep: z.string().nullish(),
    sepa_ci: z.string().nullish(),
    sepa_batch_id: z.string().nullish(),
    interest_date: z.string().datetime({ offset: true }).nullish(),
    book_date: z.string().datetime({ offset: true }).nullish(),
    process_date: z.string().datetime({ offset: true }).nullish(),
    due_date: z.string().datetime({ offset: true }).nullish(),
    payment_date: z.string().datetime({ offset: true }).nullish(),
    invoice_date: z.string().datetime({ offset: true }).nullish(),
  })
  .passthrough();
const TransactionStore = z
  .object({
    error_if_duplicate_hash: z.boolean().optional(),
    apply_rules: z.boolean().optional(),
    fire_webhooks: z.boolean().optional().default(true),
    group_title: z.string().nullish(),
    transactions: z.array(TransactionSplitStore),
  })
  .passthrough();
const TransactionSplitUpdate = z
  .object({
    transaction_journal_id: z.string().optional(),
    type: TransactionTypeProperty.optional(),
    date: z.string().datetime({ offset: true }).optional(),
    amount: z.string().optional(),
    description: z.string().optional(),
    order: z.number().int().nullish(),
    currency_id: z.string().nullish(),
    currency_code: z.string().nullish(),
    currency_symbol: z.string().optional(),
    currency_name: z.string().optional(),
    currency_decimal_places: z.number().int().optional(),
    foreign_amount: z.string().nullish(),
    foreign_currency_id: z.string().nullish(),
    foreign_currency_code: z.string().nullish(),
    foreign_currency_symbol: z.string().nullish(),
    foreign_currency_decimal_places: z.number().int().nullish(),
    budget_id: z.string().nullish(),
    budget_name: z.string().nullish(),
    category_id: z.string().nullish(),
    category_name: z.string().nullish(),
    source_id: z.string().nullish(),
    source_name: z.string().nullish(),
    source_iban: z.string().nullish(),
    destination_id: z.string().nullish(),
    destination_name: z.string().nullish(),
    destination_iban: z.string().nullish(),
    reconciled: z.boolean().optional(),
    bill_id: z.string().nullish(),
    bill_name: z.string().nullish(),
    tags: z.array(z.string()).nullish(),
    notes: z.string().nullish(),
    internal_reference: z.string().nullish(),
    external_id: z.string().nullish(),
    external_url: z.string().nullish(),
    bunq_payment_id: z.string().nullish(),
    sepa_cc: z.string().nullish(),
    sepa_ct_op: z.string().nullish(),
    sepa_ct_id: z.string().nullish(),
    sepa_db: z.string().nullish(),
    sepa_country: z.string().nullish(),
    sepa_ep: z.string().nullish(),
    sepa_ci: z.string().nullish(),
    sepa_batch_id: z.string().nullish(),
    interest_date: z.string().datetime({ offset: true }).nullish(),
    book_date: z.string().datetime({ offset: true }).nullish(),
    process_date: z.string().datetime({ offset: true }).nullish(),
    due_date: z.string().datetime({ offset: true }).nullish(),
    payment_date: z.string().datetime({ offset: true }).nullish(),
    invoice_date: z.string().datetime({ offset: true }).nullish(),
  })
  .passthrough();
const TransactionUpdate = z
  .object({
    apply_rules: z.boolean().optional(),
    fire_webhooks: z.boolean().optional().default(true),
    group_title: z.string().nullish(),
    transactions: z.array(TransactionSplitUpdate).optional(),
  })
  .passthrough();

export const transactionContract = c.router({
  listAttachmentByTransaction: {
    method: 'GET',
    path: '/v1/transactions/:id/attachments',
    summary: 'Lists all attachments.',
    headers: z.object({ 'X-Trace-Id': z.string().uuid().optional() }),
    query: z.object({ limit: z.number().int().optional(), page: z.number().int().optional() }),
    pathParams: z.object({ id: z.string() }),
    responses: {
      200: c.otherResponse({ contentType: 'application/vnd.api+json', body: AttachmentArray }),
      400: BadRequestResponse,
      401: UnauthenticatedResponse,
      404: NotFoundResponse,
      500: InternalExceptionResponse,
    },
  },
  listEventByTransaction: {
    method: 'GET',
    path: '/v1/transactions/:id/piggy-bank-events',
    summary: 'Lists all piggy bank events.',
    headers: z.object({ 'X-Trace-Id': z.string().uuid().optional() }),
    query: z.object({ limit: z.number().int().optional(), page: z.number().int().optional() }),
    pathParams: z.object({ id: z.string() }),
    responses: {
      200: c.otherResponse({ contentType: 'application/vnd.api+json', body: PiggyBankEventArray }),
      400: BadRequestResponse,
      401: UnauthenticatedResponse,
      404: NotFoundResponse,
      500: InternalExceptionResponse,
    },
  },
  listTransaction: {
    method: 'GET',
    path: '/v1/transactions',
    summary: "List all the user's transactions.\n",
    headers: z.object({ 'X-Trace-Id': z.string().uuid().optional() }),
    query: z.object({
      limit: z.number().int().optional(),
      page: z.number().int().optional(),
      start: z.string().optional(),
      end: z.string().optional(),
      type: z
        .enum([
          'all',
          'withdrawal',
          'withdrawals',
          'expense',
          'deposit',
          'deposits',
          'income',
          'transfer',
          'transfers',
          'opening_balance',
          'reconciliation',
          'special',
          'specials',
          'default',
        ])
        .optional(),
    }),
    responses: {
      200: c.otherResponse({ contentType: 'application/vnd.api+json', body: TransactionArray }),
      400: BadRequestResponse,
      401: UnauthenticatedResponse,
      404: NotFoundResponse,
      500: InternalExceptionResponse,
    },
  },
  storeTransaction: {
    method: 'POST',
    path: '/v1/transactions',
    summary: 'Store a new transaction',
    headers: z.object({ 'X-Trace-Id': z.string().uuid().optional() }),
    body: TransactionStore,
    contentType: 'application/json',
    responses: {
      200: c.otherResponse({ contentType: 'application/vnd.api+json', body: TransactionSingle }),
      400: BadRequestResponse,
      401: UnauthenticatedResponse,
      404: NotFoundResponse,
      422: ValidationErrorResponse,
      500: InternalExceptionResponse,
    },
  },
  getTransaction: {
    method: 'GET',
    path: '/v1/transactions/:id',
    summary: 'Get a single transaction.',
    headers: z.object({ 'X-Trace-Id': z.string().uuid().optional() }),
    pathParams: z.object({ id: z.string() }),
    responses: {
      200: c.otherResponse({ contentType: 'application/vnd.api+json', body: TransactionSingle }),
      400: BadRequestResponse,
      401: UnauthenticatedResponse,
      404: NotFoundResponse,
      500: InternalExceptionResponse,
    },
  },
  updateTransaction: {
    method: 'PUT',
    path: '/v1/transactions/:id',
    summary:
      'Update existing transaction. For more information, see https://docs.firefly-iii.org/references/firefly-iii/api/specials/',
    headers: z.object({ 'X-Trace-Id': z.string().uuid().optional() }),
    pathParams: z.object({ id: z.string() }),
    body: TransactionUpdate,
    contentType: 'application/json',
    responses: {
      200: c.otherResponse({ contentType: 'application/vnd.api+json', body: TransactionSingle }),
      400: BadRequestResponse,
      401: UnauthenticatedResponse,
      404: NotFoundResponse,
      422: ValidationErrorResponse,
      500: InternalExceptionResponse,
    },
  },
  deleteTransaction: {
    method: 'DELETE',
    path: '/v1/transactions/:id',
    summary: 'Delete a transaction.',
    headers: z.object({ 'X-Trace-Id': z.string().uuid().optional() }),
    pathParams: z.object({ id: z.string() }),
    body: z.void(),
    responses: {
      204: z.void(),
      400: BadRequestResponse,
      401: UnauthenticatedResponse,
      404: NotFoundResponse,
      500: InternalExceptionResponse,
    },
  },
});
